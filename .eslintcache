[{"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\index.js":"1","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\App.js":"2","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\components\\Search.js":"3","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\components\\List.js":"4","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\components\\Breadcrumb.js":"5","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\store\\store.js":"6","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\store\\reducers.js":"7","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\store\\actions.js":"8","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\store\\types.js":"9","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\components\\AtomControl.js":"10","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\components\\Atom.js":"11"},{"size":220,"mtime":1609834179017,"results":"12","hashOfConfig":"13"},{"size":1138,"mtime":1610189657286,"results":"14","hashOfConfig":"13"},{"size":234,"mtime":1610099831659,"results":"15","hashOfConfig":"13"},{"size":1456,"mtime":1610294933389,"results":"16","hashOfConfig":"13"},{"size":150,"mtime":1610099825266,"results":"17","hashOfConfig":"13"},{"size":817,"mtime":1610199913243,"results":"18","hashOfConfig":"13"},{"size":2672,"mtime":1610210597324,"results":"19","hashOfConfig":"13"},{"size":2909,"mtime":1610210502404,"results":"20","hashOfConfig":"13"},{"size":818,"mtime":1610200041583,"results":"21","hashOfConfig":"13"},{"size":189,"mtime":1610204042210,"results":"22","hashOfConfig":"13"},{"size":1981,"mtime":1610294891531,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"plbyie",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\index.js",[],["48","49"],"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\App.js",[],"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\components\\Search.js",[],"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\components\\List.js",["50"],"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\components\\Breadcrumb.js",[],"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\store\\store.js",[],"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\store\\reducers.js",["51","52"],"import * as types from './types'\r\nimport * as actions from './actions'\r\nimport {useState} from 'react'\r\n\r\nexport const listReducer = (state={}, action) => {\r\n    switch(action.type){\r\n        case types.FETCH_DATA:\r\n            return { ...state, loadingData: true }\r\n        case types.FETCHING_DATA_SUCCES:\r\n            return { ...state, \r\n                    listName: action.payload.listName,\r\n                    listContent: action.payload.listContent,\r\n                    loadingData: false }\r\n        case types.FETCHING_DATA_FAILED:\r\n            return { ...state, \r\n                    loadingData: false, \r\n                    errorMessage: action.payload }\r\n        case types.FOCUS_ATOM:\r\n            return { ...state,\r\n                    focussedAtomId: action.payload.focussedAtomId,\r\n                    focussedField: action.payload.focussedField }\r\n        case types.BLUR_ATOM:\r\n            if (state.focussedAtomId === action.payload.focussedAtomId &&\r\n                state.focussedField === action.payload.focussedField){\r\n                // in case that another focus action is dispatched before\r\n                // this blur action, it's nessecary to check that the right\r\n                // atom is blurred\r\n                return { ...state,\r\n                    focussedAtomId: \"\",\r\n                    focussedField: \"\" }\r\n            } else {\r\n                // the case when focus action is dispatched before a blur action\r\n                // no action needed, focus action has overwritten the old state\r\n                return { ...state }\r\n            }\r\n        case types.EDIT_ATOM_TITLE:\r\n            let editedTitle = state.listContent.map(atom => {\r\n                                    if (atom.id === action.payload.atomId){    \r\n                                        return { ...atom, title: action.payload.title}\r\n                                    } else {\r\n                                        return atom\r\n                                    }\r\n            })  \r\n            return{ ...state,\r\n                listContent: editedTitle\r\n            }\r\n        case types.EDIT_ATOM_NOTES:\r\n            let editedNotes = state.listContent.map(atom => {\r\n                                    if (atom.id === action.payload.atomId){    \r\n                                        return { ...atom, notes: action.payload.notes}\r\n                                    } else {\r\n                                        return atom\r\n                                    }\r\n            })  \r\n            return{ ...state,\r\n                listContent: editedNotes\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\store\\actions.js",[],"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\store\\types.js",[],"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\components\\AtomControl.js",[],"C:\\Users\\Miguel\\Documents\\Projects\\JavaScript\\nuclei\\src\\components\\Atom.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":21,"column":10,"nodeType":"59","endLine":21,"endColumn":12,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":13,"nodeType":"63","messageId":"64","endLine":2,"endColumn":20},{"ruleId":"61","severity":1,"message":"65","line":3,"column":9,"nodeType":"63","messageId":"64","endLine":3,"endColumn":17},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["68"],"no-unused-vars","'actions' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [dispatch]",{"range":"71","text":"72"},[600,602],"[dispatch]"]